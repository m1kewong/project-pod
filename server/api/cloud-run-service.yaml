apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: genz-video-api
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
    run.googleapis.com/cpu-throttling: "false"
spec:
  template:
    metadata:
      annotations:
        # Resource allocation
        run.googleapis.com/memory: "2Gi"
        run.googleapis.com/cpu: "2"
        run.googleapis.com/execution-environment: gen2
        
        # Scaling
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "100"
        
        # Service account with required permissions
        run.googleapis.com/service-account: "genz-video-api@project-pod-dev.iam.gserviceaccount.com"
        
        # VPC connector (if needed for private resources)
        # run.googleapis.com/vpc-access-connector: "projects/project-pod-dev/locations/asia-east1/connectors/main-vpc-connector"
        
        # Startup probe
        run.googleapis.com/startup-cpu-boost: "true"
    spec:
      serviceAccountName: genz-video-api@project-pod-dev.iam.gserviceaccount.com
      containerConcurrency: 100
      timeoutSeconds: 300
      containers:
      - name: genz-video-api
        image: asia-east1-docker.pkg.dev/project-pod-dev/main/genz-video-api:latest
        ports:
        - name: http1
          containerPort: 8080
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: GOOGLE_CLOUD_PROJECT
          value: "project-pod-dev"
        - name: FIREBASE_PROJECT_ID
          value: "project-pod-dev"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-connection
              key: host
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-connection
              key: port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-connection
              key: password
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        resources:
          requests:
            memory: "1Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "2"
  traffic:
  - percent: 100
    latestRevision: true
